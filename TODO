[ ] test all exceptions
[ ] postgres composite type query

[ ] faster class initialisation !!! Model initialisation braucht zu lange!

[ ] custom relations
  [ ] graphql pagination -> mit cursor?! + pageInfo
  [ ] graphql relation pagination
  [ ] `this.belongsTo('alternative', {model: 'Food', foreign_key: 'food_id'})` sollte kein foreign_key brauchen!

[ ] Bug:
  this.hasMany('category_parents', { foreign_key: 'id' })
  this.hasMany('parents', { through: 'category_parents', relation: 'parents' })
  .include('parents') empty result is [<empty collection>]

[ ] rewrite operators
[ ] cache relations and use them in nested includes... one base cache for the first exec
[ ] belongsToPolymorphic setter
[ ] hasManyThrough setter
[ ] jobs with same priority -> parallel
[ ] remove attribute events -> remove all events...
[ ] "updates a relation id with original relation loaded" for belongsToMany
[ ] Oracle tests!
[ ] Use `debug` module
[ ] select + transformations => https://github.com/jsonata-js/jsonata

BREAKING CHANGES:
`plugins` and `models` store config does not autoload via `glob`
`paranoid` plugin scope is not `withDeleted`
`join()` does an inner join by default
failed validations will throw an error
`save`, `delete`, `create`,... won't return `success`, but instead the record itself
hooks must return a promise. The `done` callback was removed
`create`, `save`, `destroy`, ... won't take callbacks any more. use `.then(callback)`
relations wont be saved anymore. except you set autoSave to `true` (store or per relation)
related records are Promises. Access loaded data directly via `record._relationname`
`limit(1)` does not return a single record anymore. Use `first()` or `singleRecord()` instead
